# prometheus/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'hft_trading'
    static_configs:
      - targets: ['hft-trading:8000']
    metrics_path: '/metrics'

  - job_name: 'market_data'
    static_configs:
      - targets: ['market-data:8001']
    metrics_path: '/metrics'

  - job_name: 'execution'
    static_configs:
      - targets: ['execution:8002']
    metrics_path: '/metrics'

  - job_name: 'node_exporter'
    static_configs:
      - targets: ['node-exporter:9100']

alert_rules:
  groups:
    - name: trading_alerts
      rules:
        - alert: HighLatency
          expr: hft_order_latency_seconds > 0.001
          for: 1m
          labels:
            severity: critical
          annotations:
            summary: High order latency detected
            
        - alert: ErrorRateHigh
          expr: rate(hft_errors_total[5m]) > 10
          for: 1m
          labels:
            severity: warning
          annotations:
            summary: High error rate detected

---
# grafana/dashboards/trading.json
{
  "dashboard": {
    "id": null,
    "title": "HFT Trading Dashboard",
    "tags": ["trading", "performance"],
    "timezone": "browser",
    "schemaVersion": 16,
    "version": 0,
    "refresh": "5s",
    "panels": [
      {
        "title": "Order Latency",
        "type": "graph",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "rate(hft_order_latency_seconds_sum[5m]) / rate(hft_order_latency_seconds_count[5m])",
            "legendFormat": "Average Latency"
          }
        ]
      },
      {
        "title": "Order Rate",
        "type": "graph",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "rate(hft_orders_total[5m])",
            "legendFormat": "Orders/sec"
          }
        ]
      },
      {
        "title": "P&L",
        "type": "graph",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "hft_pnl_total",
            "legendFormat": "Total P&L"
          }
        ]
      }
    ]
  }
}

---
# docker-compose.monitoring.yml
version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:8.5.0
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_DASHBOARDS_DISABLE_SANITIZATION=true

  node-exporter:
    image: prom/node-exporter:v1.3.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'

volumes:
  prometheus_data:
  grafana_data:

---
# k8s/monitoring/prometheus-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.30.3
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
        ports:
          - containerPort: 9090
        volumeMounts:
          - name: prometheus-config
            mountPath: /etc/prometheus
          - name: prometheus-storage
            mountPath: /prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-storage

---
# k8s/monitoring/grafana-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:8.5.0
        ports:
          - containerPort: 3000
        volumeMounts:
          - name: grafana-storage
            mountPath: /var/lib/grafana
          - name: grafana-dashboards
            mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards