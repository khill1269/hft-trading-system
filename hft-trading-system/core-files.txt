# src/core/settings.py
from pydantic_settings import BaseSettings
from typing import Optional
from pathlib import Path

class Settings(BaseSettings):
    """System configuration settings"""
    # Database settings
    database_url: str
    redis_url: str
    
    # Environment settings
    environment: str = "development"
    log_level: str = "INFO"
    
    # Trading settings
    market_data_source: str = "ibkr"
    risk_check_interval: int = 1
    max_position_value: float = 1_000_000
    
    # Performance settings
    execution_timeout: float = 0.1
    market_data_timeout: float = 0.1
    
    class Config:
        env_file = ".env"
        case_sensitive = False

# src/core/models.py
from typing import Optional, Dict, Any
from datetime import datetime
from decimal import Decimal
from enum import Enum
from pydantic import BaseModel

class OrderType(str, Enum):
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    STOP = "STOP"
    STOP_LIMIT = "STOP_LIMIT"

class OrderSide(str, Enum):
    BUY = "BUY"
    SELL = "SELL"

class OrderStatus(str, Enum):
    NEW = "NEW"
    ACCEPTED = "ACCEPTED"
    REJECTED = "REJECTED"
    FILLED = "FILLED"
    CANCELLED = "CANCELLED"

class Order(BaseModel):
    """Order model"""
    order_id: str
    symbol: str
    side: OrderSide
    order_type: OrderType
    quantity: Decimal
    price: Optional[Decimal] = None
    status: OrderStatus = OrderStatus.NEW
    timestamp: datetime = datetime.utcnow()
    metadata: Dict[str, Any] = {}

class Position(BaseModel):
    """Position model"""
    symbol: str
    quantity: Decimal
    average_price: Decimal
    unrealized_pnl: Decimal = Decimal(0)
    realized_pnl: Decimal = Decimal(0)
    last_update: datetime = datetime.utcnow()
    metadata: Dict[str, Any] = {}

# src/core/exceptions.py
from typing import Optional, Any

class TradingSystemError(Exception):
    """Base exception class"""
    def __init__(
        self,
        message: str,
        details: Optional[Dict[str, Any]] = None
    ):
        super().__init__(message)
        self.details = details or {}

class MarketDataError(TradingSystemError):
    """Market data related errors"""
    pass

class ExecutionError(TradingSystemError):
    """Order execution related errors"""
    pass

class RiskError(TradingSystemError):
    """Risk management related errors"""
    pass

# src/core/logging.py
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional

def setup_logging(
    log_level: str = "INFO",
    log_file: Optional[str] = None
) -> None:
    """Configure system logging"""
    # Create formatter
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Setup handlers
    handlers = [logging.StreamHandler(sys.stdout)]
    
    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        file_handler = logging.FileHandler(log_file)
        file_handler.setFormatter(formatter)
        handlers.append(file_handler)
    
    # Configure root logger
    logging.basicConfig(
        level=getattr(logging, log_level.upper()),
        handlers=handlers,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
