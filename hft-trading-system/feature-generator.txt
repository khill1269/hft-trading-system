"""
Advanced feature generation for ML models with FPGA acceleration
"""
import numpy as np
import torch
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta

@dataclass
class FeatureSet:
    technical_features: np.ndarray
    market_features: np.ndarray
    sentiment_features: np.ndarray
    temporal_features: np.ndarray
    metadata: Dict

class FeatureGenerator:
    """High-performance feature generation"""
    
    def __init__(
        self,
        config: Dict,
        fpga_manager: Optional['FPGAManager'] = None
    ):
        self.config = config
        self.fpga_manager = fpga_manager
        
        # Feature configuration
        self.feature_config = config.get('features', {})
        self.lookback_window = config.get('lookback_window', 100)
        
        # Feature cache
        self._feature_cache = {}
        self._last_update = {}
        
        # Initialize FPGA if available
        if fpga_manager:
            self._init_fpga_features()

    def _init_fpga_features(self) -> None:
        """Initialize FPGA for feature calculation"""
        try:
            # Configure FPGA for feature generation
            self.fpga_manager.configure_features({
                'max_lookback': self.lookback_window,
                'features': self.feature_config.get('fpga_features', [])
            })
        except Exception as e:
            self.logger.error(f"FPGA feature initialization failed: {e}")

    async def generate_features(
        self,
        market_data: Dict,
        feature_names: List[str]
    ) -> np.ndarray:
        """Generate features from market data"""
        try:
            # Check cache
            cache_key = self._get_cache_key(market_data)
            if self._can_use_cache(cache_key):
                return self._feature_cache[cache_key]
            
            # Generate feature sets
            features = FeatureSet(
                technical_features=await self._generate_technical_features(market_data),
                market_features=await self._generate_market_features(market_data),
                sentiment_features=await self._generate_sentiment_features(market_data),
                temporal_features=self._generate_temporal_features(market_data),
                metadata={'timestamp': datetime.utcnow()}
            )
            
            # Combine features
            combined = self._combine_features(features, feature_names)
            
            # Update cache
            self._update_cache(cache_key, combined)
            
            return combined
            
        except Exception as e:
            self.logger.error(f"Feature generation failed: {e}")
            return np.array([])

    async def _generate_technical_features(
        self,
        market_data: Dict
    ) -> np.ndarray:
        """Generate technical analysis features"""
        if self.fpga_manager and 'technical' in self.feature_config.get('fpga_features', []):
            return await self._generate_fpga_technical(market_data)
        
        prices = market_data['prices']
        volumes = market_data['volumes']
        features = []
        
        # Moving averages
        for window in [5, 10, 20, 50, 100]:
            ma = np.convolve(prices, np.ones(window)/window, mode='valid')
            features.append(ma[-1])
        
        # Volatility
        for window in [10, 20, 50]:
            volatility = np.std(prices[-window:])
            features.append(volatility)
        
        # MACD
        exp1 = prices.ewm(span=12, adjust=False).mean()
        exp2 = prices.ewm(span=26, adjust=False).mean()
        macd = exp1 - exp2
        signal = macd.ewm(span=9, adjust=False).mean()
        features.extend([macd[-1], signal[-1]])
        
        # RSI
        delta = np.diff(prices)
        gain = (delta.copy()*(delta > 0)).ewm(span=14).mean()
        loss = (-delta.copy()*(delta < 0)).ewm(span=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        features.append(rsi[-1])
        
        return np.array(features)

    async def _generate_fpga_technical(self, market_data: Dict) -> np.ndarray:
        """Generate technical features using FPGA"""
        try:
            # Prepare data for FPGA
            data = self._pack_market_data(market_data)
            
            # Process through FPGA
            result = await self.fpga_manager.generate_features(data)
            if result is None:
                raise ValueError("FPGA feature generation failed")
            
            # Unpack results
            return np.frombuffer(result, dtype=np.float32)
            
        except Exception as e:
            self.logger.error(f"FPGA technical feature generation failed: {e}")
            return np.array([])

    async def _generate_market_features(self, market_data: Dict) -> np.ndarray:
        """Generate market microstructure features"""
        features = []
        
        # Order book features
        if 'order_book' in market_data:
            book = market_data['order_book']
            
            # Spread
            features.append(book['best_ask'] - book['best_bid'])
            
            # Depth
            features.append(sum(book['ask_sizes']))
            features.append(sum(book['bid_sizes']))
            
            # Imbalance
            total_depth = sum(book['ask_sizes']) + sum(book['bid_sizes'])
            if total_depth > 0:
                imbalance = (sum(book['bid_sizes']) - sum(book['ask_sizes'])) / total_depth
                features.append(imbalance)
            else:
                features.append(0)
        
        # Volume features
        if 'volumes' in market_data:
            volumes = market_data['volumes']
            
            # Volume moving averages
            for window in [5, 10, 20]:
                vol_ma = np.convolve(volumes, np.ones(window)/window, mode='valid')
                features.append(vol_ma[-1])
            
            # Volume volatility
            features.append(np.std(volumes[-20:]))
        
        return np.array(features)

    async def _generate_sentiment_features(self, market_data: Dict) -> np.ndarray:
        """Generate sentiment analysis features"""
        features = []
        
        if 'sentiment' in market_data:
            sentiment_data = market_data['sentiment']
            
            # Basic sentiment
            features.append(sentiment_data.get('score', 0))
            
            # Sentiment moving averages
            sentiment_history = sentiment_data.get('history', [])
            if sentiment_history:
                for window in [5, 10, 20]:
                    if len(sentiment_history) >= window:
                        ma = np.mean(sentiment_history[-window:])
                        features.append(ma)
                    else:
                        features.append(0)
            
            # Sentiment volatility
            if len(sentiment_history) >= 20:
                features.append(np.std(sentiment_history[-20:]))
            else:
                features.append(0)
        
        return np.array(features)

    def _generate_temporal_features(self, market_data: Dict) -> np.ndarray:
        """Generate time-based features"""
        features = []
        timestamp = market_data.get('timestamp', datetime.utcnow())
        
        # Time of day
        hour = timestamp.hour + timestamp.minute / 60
        features.append(np.sin(hour * 2 * np.pi / 24))  # Cyclical encoding
        features.append(np.cos(hour * 2 * np.pi / 24))
        
        # Day of week
        day = timestamp.weekday()
        features.append(np.sin(day * 2 * np.pi / 7))
        features.append(np.cos(day * 2 * np.pi / 7))
        
        # Market session
        is_market_hours = 9.5 <= hour <= 16
        features.append(1 if is_market_hours else 0)
        
        return np.array(features)

    def _combine_features(
        self,
        feature_set: FeatureSet,
        feature_names: List[str]
    ) -> np.ndarray:
        """Combine selected features"""
        features = []
        
        for name in feature_names:
            if name.startswith('tech_'):
                idx = int