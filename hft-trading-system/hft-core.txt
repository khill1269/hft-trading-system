[Previous code remains the same until _emergency_position_reduction]

    async def _emergency_position_reduction(self, details: Dict) -> None:
        """Implement emergency position reduction"""
        try:
            if 'symbol' in details:
                # Reduce specific position
                symbol = details['symbol']
                position = self._get_position(symbol)
                
                if position != 0:
                    # Create emergency order
                    order = OrderPacket(
                        order_id=self._generate_order_id(),
                        symbol=symbol,
                        side=position < 0,  # Opposite side to reduce position
                        price=0.0,  # Market order
                        quantity=abs(position),
                        timestamp=int(datetime.utcnow().timestamp() * 1e9),
                        type=1,  # Market order
                        flags=0x1  # Emergency flag
                    )
                    
                    await self._submit_emergency_order(order)
            else:
                # Reduce all positions
                positions = self._get_current_positions()
                for symbol, position in positions.items():
                    if position != 0:
                        order = OrderPacket(
                            order_id=self._generate_order_id(),
                            symbol=symbol,
                            side=position < 0,
                            price=0.0,
                            quantity=abs(position),
                            timestamp=int(datetime.utcnow().timestamp() * 1e9),
                            type=1,
                            flags=0x1
                        )
                        
                        await self._submit_emergency_order(order)
                        
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"Emergency position reduction failed: {str(e)}")
            )
    
    async def _submit_emergency_order(self, order: OrderPacket) -> None:
        """Submit emergency order with highest priority"""
        try:
            # Convert order to binary format
            order_data = struct.pack(
                'Q 16s ? d I Q I I',
                order.order_id,
                order.symbol.encode(),
                order.side,
                order.price,
                order.quantity,
                order.timestamp,
                order.type,
                order.flags
            )
            
            # Send with highest priority
            self.order_socket.setsockopt(zmq.PRIORITY, 100)
            await self.order_socket.send(order_data)
            self.order_socket.setsockopt(zmq.PRIORITY, 50)  # Reset priority
            
            self.logger.log_event(
                "EMERGENCY_ORDER",
                f"Submitted emergency order for {order.symbol}",
                extra_data={
                    'order_id': order.order_id,
                    'quantity': order.quantity,
                    'side': 'BUY' if order.side else 'SELL'
                }
            )
            
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"Emergency order submission failed: {str(e)}")
            )
    
    def _generate_order_id(self) -> int:
        """Generate unique order ID"""
        timestamp = int(datetime.utcnow().timestamp() * 1e6)  # microseconds
        sequence = self._get_sequence_number('order')
        return (timestamp << 20) | (sequence & 0xFFFFF)
    
    def optimize_network(self) -> None:
        """Optimize network settings for low latency"""
        try:
            if os.name == 'posix':  # Linux systems
                # Set network interface parameters
                interface = self.config.get('network_interface', 'eth0')
                
                # Disable interrupt coalescing
                os.system(f'ethtool -C {interface} rx-usecs 0 rx-frames 1')
                
                # Enable busy polling
                with open('/proc/sys/net/busy_poll', 'w') as f:
                    f.write('50')
                    
                # Increase socket buffer sizes
                with open('/proc/sys/net/core/rmem_max', 'w') as f:
                    f.write('16777216')  # 16MB
                with open('/proc/sys/net/core/wmem_max', 'w') as f:
                    f.write('16777216')  # 16MB
                    
                # Disable TCP slow start
                with open('/proc/sys/net/ipv4/tcp_slow_start_after_idle', 'w') as f:
                    f.write('0')
                    
                # Configure interrupt affinity
                self._configure_interrupt_affinity()
                
            self.logger.log_event(
                "NETWORK_OPTIMIZATION",
                "Applied network optimizations"
            )
            
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"Network optimization failed: {str(e)}")
            )
    
    def _configure_interrupt_affinity(self) -> None:
        """Configure network interrupt affinity"""
        try:
            interface = self.config.get('network_interface', 'eth0')
            cpu_cores = self.config.get('cpu_cores', [0, 1])  # Cores for network
            
            # Get interrupt numbers for network interface
            with open('/proc/interrupts', 'r') as f:
                interrupts = f.readlines()
                
            for line in interrupts:
                if interface in line:
                    irq = line.split(':')[0].strip()
                    
                    # Set affinity
                    mask = sum(1 << core for core in cpu_cores)
                    with open(f'/proc/irq/{irq}/smp_affinity', 'w') as f:
                        f.write(f'{mask:x}')
                        
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"Interrupt affinity configuration failed: {str(e)}")
            )
    
    def _setup_cpu_affinity(self) -> None:
        """Set CPU affinity for trading processes"""
        try:
            import psutil
            
            # Get process CPU affinity
            process = psutil.Process()
            
            # Set affinity to specified cores
            trading_cores = self.config.get('trading_cores', [2, 3])
            process.cpu_affinity(trading_cores)
            
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"CPU affinity setup failed: {str(e)}")
            )
    
    def _setup_process_priority(self) -> None:
        """Set process priority"""
        try:
            import psutil
            
            # Get current process
            process = psutil.Process()
            
            if os.name == 'posix':
                # Set real-time priority on Linux
                process.nice(-20)  # Highest priority
                
                # Set SCHED_FIFO scheduling
                param = struct.pack('I', 1)  # SCHED_FIFO
                os.sched_setscheduler(0, 1, param)
                
            elif os.name == 'nt':  # Windows
                # Set high priority
                process.nice(psutil.HIGH_PRIORITY_CLASS)
                
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"Process priority setup failed: {str(e)}")
            )
    
    def get_latency_stats(self) -> Dict:
        """Get latency statistics"""
        try:
            stats = {
                'market_data': self._calculate_latency_stats(
                    self._latency_measurements.get('market_data', [])
                ),
                'order': self._calculate_latency_stats(
                    self._latency_measurements.get('order', [])
                ),
                'execution': self._calculate_latency_stats(
                    self._latency_measurements.get('execution', [])
                )
            }
            
            return stats
            
        except Exception as e:
            self.error_handler.handle_error(
                HFTError(f"Latency stats calculation failed: {str(e)}")
            )
            return {}
    
    def _calculate_latency_stats(self, measurements: List[float]) -> Dict:
        """Calculate latency statistics"""
        if not measurements:
            return {
                'min': 0,
                'max': 0,
                'mean': 0,
                'p99': 0
            }
        
        return {
            'min': min(measurements),
            'max': max(measurements),
            'mean': sum(measurements) / len(measurements),
            'p99': np.percentile(measurements, 99)
        }

class HFTError(Exception):
    """Custom exception for HFT errors"""
    pass
