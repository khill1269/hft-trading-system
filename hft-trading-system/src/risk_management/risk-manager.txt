    def _check_risk_metrics(self, position: Position) -> bool:
        """Check if risk metrics are within limits"""
        if not self.risk_metrics:
            return True
            
        # Check VaR limit
        var_limit = self.risk_limits.get('var_95', Decimal('inf'))
        if self.risk_metrics.var_95 > var_limit:
            return False
            
        # Check volatility limit
        vol_limit = self.risk_limits.get('max_volatility', float('inf'))
        if self.risk_metrics.volatility > vol_limit:
            return False
            
        # Check correlation limits
        if self._correlation_matrix is not None:
            max_correlation = self.risk_limits.get('max_correlation', 0.8)
            if not self._check_correlation_limits(position.symbol, max_correlation):
                return False
        
        return True
    
    def _check_correlation_limits(self, symbol: str, max_correlation: float) -> bool:
        """Check portfolio correlation limits"""
        symbol_idx = self._get_symbol_index(symbol)
        if symbol_idx is None:
            return True
            
        # Check correlation with existing positions
        for pos_symbol in self.positions:
            pos_idx = self._get_symbol_index(pos_symbol)
            if pos_idx is not None and pos_idx != symbol_idx:
                correlation = abs(self._correlation_matrix[symbol_idx, pos_idx])
                if correlation > max_correlation:
                    return False
        
        return True
    
    async def _calculate_risk_metrics(self) -> RiskMetrics:
        """Calculate portfolio risk metrics"""
        try:
            start_time = datetime.utcnow()
            
            # Get position data
            positions = list(self.positions.values())
            if not positions:
                return self._get_empty_risk_metrics()
            
            # Calculate returns
            returns = self._calculate_position_returns()
            
            # Calculate VaR
            var_95, cvar_95 = self._calculate_var_metrics(returns)
            
            # Calculate portfolio metrics
            sharpe = self._calculate_sharpe_ratio(returns)
            max_dd = self._calculate_max_drawdown()
            beta = self._calculate_portfolio_beta()
            vol = self._calculate_portfolio_volatility(returns)
            
            # Update correlation matrix
            self._correlation_matrix = self._calculate_correlation_matrix(returns)
            
            # Calculate concentration
            concentration = self._calculate_concentration()
            
            metrics = RiskMetrics(
                var_95=var_95,
                cvar_95=cvar_95,
                sharpe_ratio=sharpe,
                max_drawdown=max_dd,
                beta=beta,
                volatility=vol,
                correlation_matrix=self._correlation_matrix,
                position_concentration=concentration
            )
            
            # Track calculation time
            calc_time = (datetime.utcnow() - start_time).total_seconds() * 1000
            self._calculation_times.append(calc_time)
            
            return metrics
            
        except Exception as e:
            self.error_handler.handle_error(
                RiskError("Risk metrics calculation failed", e)
            )
            return self._get_empty_risk_metrics()
    
    def _calculate_position_returns(self) -> np.ndarray:
        """Calculate position returns matrix"""
        # Get historical prices for all positions
        prices = {}
        for symbol in self.positions:
            hist_data = self._position_history.get(symbol, [])
            if hist_data:
                prices[symbol] = [float(pos.average_price) for pos in hist_data]
        
        # Calculate returns
        returns_data = {}
        for symbol, price_data in prices.items():
            if len(price_data) > 1:
                returns = np.diff(np.log(price_data))
                returns_data[symbol] = returns
        
        # Create returns matrix
        symbols = list(returns_data.keys())
        if not symbols:
            return np.array([])
            
        n_periods = min(len(returns_data[sym]) for sym in symbols)
        returns_matrix = np.zeros((len(symbols), n_periods))
        
        for i, symbol in enumerate(symbols):
            returns_matrix[i, :] = returns_data[symbol][-n_periods:]
        
        return returns_matrix
    
    def _calculate_var_metrics(
        self,
        returns: np.ndarray,
        confidence: float = 0.95
    ) -> Tuple[Decimal, Decimal]:
        """Calculate Value at Risk and Conditional VaR"""
        if returns.size == 0:
            return Decimal('0'), Decimal('0')
            
        # Calculate portfolio weights
        weights = self._calculate_portfolio_weights()
        
        # Calculate portfolio returns
        port_returns = np.dot(weights, returns)
        
        # Calculate VaR
        var_95 = Decimal(str(np.percentile(port_returns, (1 - confidence) * 100)))
        
        # Calculate CVaR
        cvar_95 = Decimal(str(np.mean(port_returns[port_returns <= float(var_95)])))
        
        return var_95, cvar_95
    
    def _calculate_portfolio_weights(self) -> np.ndarray:
        """Calculate portfolio position weights"""
        total_value = sum(pos.notional_value for pos in self.positions.values())
        if total_value == 0:
            return np.zeros(len(self.positions))
            
        weights = []
        for pos in self.positions.values():
            weight = float(pos.notional_value / total_value)
            weights.append(weight)
            
        return np.array(weights)
    
    def _calculate_sharpe_ratio(
        self,
        returns: np.ndarray,
        risk_free_rate: float = 0.02
    ) -> float:
        """Calculate portfolio Sharpe ratio"""
        if returns.size == 0:
            return 0.0
            
        weights = self._calculate_portfolio_weights()
        port_returns = np.dot(weights, returns)
        
        excess_returns = np.mean(port_returns) - risk_free_rate
        vol = np.std(port_returns)
        
        return excess_returns / vol if vol > 0 else 0.0
    
    def _calculate_max_drawdown(self) -> Decimal:
        """Calculate maximum drawdown from PnL history"""
        if not self._pnl_history:
            return Decimal('0')
            
        pnl_values = [x[1] for x in self._pnl_history]
        peak = float(max(pnl_values))
        drawdowns = [(peak - float(pnl)) / peak for pnl in pnl_values]
        
        return Decimal(str(max(drawdowns))) if drawdowns else Decimal('0')
    
    def _calculate_portfolio_beta(self) -> float:
        """Calculate portfolio beta relative to market"""
        # This would typically use market index returns
        # For now, return a placeholder
        return 1.0
    
    def _calculate_correlation_matrix(self, returns: np.ndarray) -> np.ndarray:
        """Calculate position correlation matrix"""
        if returns.size == 0:
            return np.array([])
        
        return np.corrcoef(returns)
    
    def _calculate_concentration(self) -> Dict[str, float]:
        """Calculate position concentration metrics"""
        total_value = sum(pos.notional_value for pos in self.positions.values())
        if total_value == 0:
            return {}
            
        concentration = {}
        for symbol, pos in self.positions.items():
            concentration[symbol] = float(pos.notional_value / total_value)
            
        return concentration
    
    def _start_monitoring(self) -> None:
        """Start risk monitoring threads"""
        async def monitor():
            while self._is_running:
                try:
                    # Update risk metrics
                    self.risk_metrics = await self._calculate_risk_metrics()
                    
                    # Check for limit breaches
                    await self._check_risk_breaches()
                    
                    # Update positions
                    await self._update_positions()
                    
                    await asyncio.sleep(1)  # Update every second
                    
                except Exception as e:
                    self.error_handler.handle_error(
                        RiskError("Risk monitoring failed", e)
                    )
        
        self._is_running = True
        asyncio.create_task(monitor())
    
    async def _check_risk_breaches(self) -> None:
        """Check for risk limit breaches"""
        if not self.risk_metrics:
            return
            
        # Check VaR breach
        var_limit = self.risk_limits.get('var_95')
        if var_limit and self.risk_metrics.var_95 > var_limit:
            await self._handle_risk_breach('VAR_BREACH', {
                'current': str(self.risk_metrics.var_95),
                'limit': str(var_limit)
            })
        
        # Check volatility breach
        vol_limit = self.risk_limits.get('max_volatility')
        if vol_limit and self.risk_metrics.volatility > vol_limit:
            await self._handle_risk_breach('VOLATILITY_BREACH', {
                'current': self.risk_metrics.volatility,
                'limit': vol_limit
            })
            
        # Check concentration breach
        max_concentration = self.risk_limits.get('max_concentration', 0.25)
        for symbol, concentration in self.risk_metrics.position_concentration.items():
            if concentration > max_concentration:
                await self._handle_risk_breach('CONCENTRATION_BREACH', {
                    'symbol': symbol,
                    'current': concentration,
                    'limit': max_concentration
                })
    
    async def _handle_risk_breach(self, breach_type: str, details: Dict) -> None:
        """Handle risk limit breach"""
        self.logger.warning(f"Risk breach detected: {breach_type}", extra=details)
        
        # Implement risk reduction if needed
        if breach_type in ['VAR_BREACH', 'VOLATILITY_BREACH']:
            await self._reduce_risk_exposure()

class RiskError(Exception):
    """Custom exception for risk management errors"""
    def __init__(self, message: str, original_error: Optional[Exception] = None):
        super().__init__(message)
        self.original_error = original_error