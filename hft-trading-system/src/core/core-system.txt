# src/core/base.py
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from datetime import datetime

class MarketDataProvider(ABC):
    """Base class for market data providers"""
    @abstractmethod
    async def connect(self) -> bool:
        """Establish connection to market data source"""
        pass
    
    @abstractmethod
    async def subscribe(self, symbols: list[str]) -> None:
        """Subscribe to market data for symbols"""
        pass
    
    @abstractmethod
    async def get_snapshot(self, symbol: str) -> Dict[str, Any]:
        """Get current market data snapshot"""
        pass

class ExecutionProvider(ABC):
    """Base class for execution providers"""
    @abstractmethod
    async def connect(self) -> bool:
        """Establish connection to execution venue"""
        pass
    
    @abstractmethod
    async def submit_order(self, order: 'Order') -> bool:
        """Submit order to venue"""
        pass
    
    @abstractmethod
    async def cancel_order(self, order_id: str) -> bool:
        """Cancel existing order"""
        pass

# src/core/engine.py
from typing import Dict, List, Optional
from datetime import datetime
import asyncio
import logging
from decimal import Decimal

class TradingEngine:
    """Core trading engine"""
    def __init__(
        self,
        settings: 'Settings',
        market_data: 'MarketDataProvider',
        execution: 'ExecutionProvider',
        risk_manager: 'RiskManager',
    ):
        self.settings = settings
        self.market_data = market_data
        self.execution = execution
        self.risk_manager = risk_manager
        self.logger = logging.getLogger(__name__)
        self._is_running = False
        
    async def start(self) -> None:
        """Start trading engine"""
        try:
            self._is_running = True
            
            # Connect to providers
            await self.market_data.connect()
            await self.execution.connect()
            
            # Start core loops
            asyncio.create_task(self._market_data_loop())
            asyncio.create_task(self._order_processing_loop())
            asyncio.create_task(self._risk_monitoring_loop())
            
            self.logger.info("Trading engine started")
            
        except Exception as e:
            self.logger.error(f"Failed to start trading engine: {str(e)}")
            self._is_running = False
            raise
    
    async def stop(self) -> None:
        """Stop trading engine"""
        self._is_running = False
        self.logger.info("Trading engine stopped")
    
    async def _market_data_loop(self) -> None:
        """Process market data updates"""
        while self._is_running:
            try:
                # Process market data
                pass
            except Exception as e:
                self.logger.error(f"Market data error: {str(e)}")
            await asyncio.sleep(0.001)  # 1ms sleep
    
    async def _order_processing_loop(self) -> None:
        """Process orders and executions"""
        while self._is_running:
            try:
                # Process orders
                pass
            except Exception as e:
                self.logger.error(f"Order processing error: {str(e)}")
            await asyncio.sleep(0.001)  # 1ms sleep
    
    async def _risk_monitoring_loop(self) -> None:
        """Monitor risk metrics"""
        while self._is_running:
            try:
                # Check risk limits
                pass
            except Exception as e:
                self.logger.error(f"Risk monitoring error: {str(e)}")
            await asyncio.sleep(1)  # 1s sleep

# src/core/monitoring.py
from typing import Dict, Any, Optional
from datetime import datetime
import psutil
import logging
from prometheus_client import Counter, Gauge, Histogram

class SystemMonitor:
    """System performance monitoring"""
    def __init__(self):
        # Prometheus metrics
        self.order_counter = Counter(
            'hft_orders_total',
            'Total number of orders processed'
        )
        self.latency_histogram = Histogram(
            'hft_latency_seconds',
            'Order processing latency'
        )
        self.position_gauge = Gauge(
            'hft_position_value',
            'Current position value',
            ['symbol']
        )
        
        # Performance tracking
        self.start_time = datetime.utcnow()
        self.logger = logging.getLogger(__name__)
    
    def record_order(self, order: 'Order') -> None:
        """Record order metrics"""
        self.order_counter.inc()
    
    def record_latency(self, latency: float) -> None:
        """Record latency measurement"""
        self.latency_histogram.observe(latency)
    
    def update_position(self, symbol: str, value: float) -> None:
        """Update position metrics"""
        self.position_gauge.labels(symbol=symbol).set(value)
    
    def get_system_metrics(self) -> Dict[str, Any]:
        """Get current system metrics"""
        return {
            'cpu_usage': psutil.cpu_percent(),
            'memory_usage': psutil.virtual_memory().percent,
            'uptime': (datetime.utcnow() - self.start_time).total_seconds()
        }